import tensorflow as tf
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Dense, Activation
import matplotlib.pyplot as plt

inData = [
  0.130653266, 0.713567839, 0.487437186, 0.56281407, 0.778894472, 0.859296482,
  0.452261307, 0.577889447, 0.236180905, 0.005025126, 0.507537688, 0.974874372,
  0.432160804, 0.728643216, 0.557788945, 0.763819095, 0.110552764, 0.060301508,
  0.64321608, 0.306532663, 0.075376884, 0.386934673, 0.185929648, 0.27638191,
  0.673366834, 0.984924623, 0.296482412, 0.055276382, 0.979899497, 0.91959799,
  0.165829146, 0.120603015, 0.40201005, 0.266331658, 0.201005025, 0.964824121,
  0.613065327, 0.125628141, 0.522613065, 0.015075377, 0.366834171, 0.502512563,
  0.994974874, 0.24120603, 0.35678392, 0.884422111, 0.633165829, 0.231155779,
  0.422110553, 0.628140704, 0.768844221, 0.688442211, 0.135678392, 0.040201005,
  0.708542714, 0.020100503, 0.899497487, 0.718592965, 0.944723618, 0.030150754,
  0.788944724, 0.010050251, 0.969849246, 0.989949749, 0.929648241, 0.954773869,
  0.412060302, 1, 0.567839196, 0.743718593, 0.180904523, 0.150753769,
  0.72361809, 0.798994975, 0.221105528, 0.100502513, 0.477386935, 0.683417085,
  0.783919598, 0.753768844, 0.211055276, 0.115577889, 0.281407035, 0.43718593,
  0.447236181, 0.924623116, 0.206030151, 0.361809045, 0.085427136, 0.618090452,
  0.090452261, 0.653266332, 0.195979899, 0.59798995, 0.170854271, 0.442211055,
  0.537688442, 0.552763819, 0.75879397, 0.140703518, 0.467336683, 0.48241206,
  0.909547739, 0.668341709, 0.939698492, 0.874371859, 0.733668342, 0.623115578,
  0.341708543, 0.904522613, 0.824120603, 0.246231156, 0.894472362, 0.879396985,
  0.336683417, 0.869346734, 0.145728643, 0.396984925, 0.472361809, 0.256281407,
  0.582914573, 0.462311558, 0.572864322, 0.035175879, 0.703517588, 0.512562814,
  0.532663317, 0.16080402, 0.814070352, 0.316582915, 0.889447236, 0.261306533,
  0.542713568, 0.819095477, 0.638190955, 0.155778894, 0.381909548, 0.648241206,
  0.025125628, 0.050251256, 0.457286432, 0.934673367, 0.251256281, 0.658291457,
  0.773869347, 0.829145729, 0.427135678, 0.592964824, 0.08040201, 0.864321608,
  0.51758794, 0.286432161, 0.326633166, 0.834170854, 0.346733668, 0.095477387,
  0.105527638, 0.291457286, 0.698492462, 0.175879397, 0.407035176, 0.849246231,
  0.417085427, 0.070351759, 0.793969849, 0.331658291, 0.844221106, 0.738693467,
  0.914572864, 0.32160804, 0.226130653, 0.67839196, 0.854271357, 0.045226131,
  0.391959799, 0.608040201, 0.351758794, 0.527638191, 0.949748744, 0.663316583,
  0.311557789, 0.065326633, 0.959798995, 0.271356784, 0.587939698, 0.804020101,
  0.301507538, 0.497487437, 0.809045226, 0.693467337, 0.603015075, 0.376884422,
  0.83919598, 0, 0.748743719, 0.547738693, 0.190954774, 0.216080402,
  0.371859296, 0.492462312
]

outData = [
  0.910114027, 0.448941367, 0.920914722, 0.81290103, 0.258581011, 0.076211844,
  0.942782452, 0.781366631, 0.980708145, 0.683989365, 0.897360961, 0.017774928,
  0.963048236, 0.385709226, 0.805660763, 0.293520847, 0.884060915, 0.799296214,
  0.640692077, 0.997149241, 0.820107957, 0.980255615, 0.958311388, 0.985506516,
  0.541702627, 0.016956857, 0.987692315, 0.784578816, 0.026180118, 0.01430237,
  0.926211891, 0.88383801, 0.97629034, 0.975148681, 0.949252634, 0.029578483,
  0.700753567, 0.906122495, 0.855147259, 0.688880015, 0.991647376, 0.906640816,
  0.040837218, 0.988932909, 0.980396741, 0.051613606, 0.663435756, 0.978518132,
  0.981753704, 0.667967056, 0.275005755, 0.502894597, 0.917390915, 0.753521353,
  0.437512616, 0.715531929, 0.025498789, 0.425409706, 0.006866649, 0.738252027,
  0.22383978, 0.688458182, 0.013542471, 0.043093196, 0.012277785, 0.014303717,
  0.956293568, 0.048106411, 0.780924425, 0.34830531, 0.944992361, 0.926858326,
  0.403772232, 0.200605301, 0.974681647, 0.855604205, 0.904899896, 0.503829479,
  0.237757689, 0.310921926, 0.960938592, 0.882205539, 0.995867203, 0.948836525,
  0.9498259, 0.005152516, 0.96965359, 0.987770602, 0.839604586, 0.689407097,
  0.844003681, 0.606973726, 0.953573429, 0.729261024, 0.939851246, 0.959489338,
  0.837092222, 0.820761022, 0.30087869, 0.896430162, 0.946646301, 0.919290997,
  0.014330878, 0.56756775, 0, 0.048468547, 0.370605266, 0.689024851,
  0.993452548, 0.015976307, 0.145167916, 0.979989694, 0.031954039, 0.043565795,
  0.985030321, 0.062697656, 0.919665337, 0.967384435, 0.928252662, 0.982340132,
  0.767713808, 0.932393195, 0.788442173, 0.737162786, 0.461775862, 0.876707801,
  0.84967876, 0.920176699, 0.168907316, 0.982657859, 0.03687841, 0.989710913,
  0.850910072, 0.158596078, 0.645503009, 0.931388843, 0.987557822, 0.613243061,
  0.713171771, 0.779505742, 0.940957502, 0.019261223, 0.986406247, 0.582135773,
  0.267371, 0.122400042, 0.970521826, 0.760966169, 0.830112657, 0.071768231,
  0.880206051, 0.992745366, 1, 0.108172206, 0.9864717, 0.856205663,
  0.861416914, 0.98592255, 0.474796782, 0.957216257, 0.97170978, 0.101026862,
  0.97484835, 0.81143192, 0.207902696, 0.991397052, 0.114011024, 0.357585721,
  0.029177293, 0.995055737, 0.991196555, 0.540515629, 0.084501355, 0.76050644,
  0.977610809, 0.724182417, 0.988710676, 0.865049116, 0.020624482, 0.575138114,
  0.989750254, 0.798448618, 0.017569491, 0.983297577, 0.754366319, 0.196829572,
  0.99421672, 0.906018051, 0.181272383, 0.49597701, 0.719879085, 0.979988331,
  0.119950459, 0.667682327, 0.332978777, 0.828486415, 0.968038607, 0.978573145,
  0.984720423, 0.898327163
]


tf.keras.backend.set_floatx('float64')

model = Sequential()

model.add(Input(shape=(1,)))
model.add(Dense(20, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer=tf.compat.v1.train.GradientDescentOptimizer(learning_rate=0.5), \
              loss='mean_squared_error',                            \
              metrics=['mean_squared_error'])

model.summary()

model_history = model.fit(inData, outData, batch_size = 1, epochs = 50)

print(model_history)

predictions = model.predict(inData)

inData, predictions = zip(*sorted(zip(inData, predictions)))
dIn, dOut = zip(*sorted(zip(inData, outData)))

plt.plot(inData, predictions)
plt.savefig('model_output.png')

plt.clf()

plt.plot(dIn, dOut)
plt.savefig('in_data.png')